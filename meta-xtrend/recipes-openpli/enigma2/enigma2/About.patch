--- a/lib/python/Tools/Geolocation.py
+++ b/lib/python/Tools/Geolocation.py
@@ -49,14 +49,14 @@
 	if config.misc.enableGeolocation.value:
 		if len(geolocation) == 0:
 			try:
-				response = urlopen("http://ip-api.com/json/?fields=status,message,timezone,proxy", data=None, timeout=10).read()
+				response = urlopen("http://ip-api.com/json/?fields=33288191", data=None, timeout=10).read()
 				# print "[Geolocation] DEBUG:", response
 				if response:
 					geolocation = loads(response)
 				status = geolocation.get("status", None)
 				if status and status == "success":
 					print("[Geolocation] Geolocation data initialised.")
-					config.misc.enableGeolocation.value = False
+					config.misc.enableGeolocation.value = True
 					config.misc.enableGeolocation.save()
 				else:
 					print("[Geolocation] Error: Geolocation lookup returned a '%s' status!  Message '%s' returned." % (status, geolocation.get("message", None)))
--- a/lib/python/Components/About.py
+++ b/lib/python/Components/About.py
@@ -5,6 +5,9 @@
 from Tools.HardwareInfo import HardwareInfo
 from Components.SystemInfo import BoxInfo
 from sys import maxsize, modules, version_info
+from subprocess import PIPE, Popen
+from socket import AF_INET, SOCK_DGRAM, inet_ntoa, socket
+from fcntl import ioctl
 
 
 def getVersionString():
@@ -87,7 +90,7 @@
 
 
 def getImageTypeString():
-	return "%s %s" % (BoxInfo.getItem("displaydistro"), BoxInfo.getItem("imageversion").title())
+	return "%s %s" % (BoxInfo.getItem("displaydistro"), BoxInfo.getItem("imageversion"))
 
 
 def getOEVersionString():
@@ -221,5 +224,66 @@
 		return '-'
 
 
+def getGccVersion():
+	process = Popen('/lib/libc.so.6', stdout=PIPE, stderr=PIPE, universal_newlines=True)
+	stdout, stderr = process.communicate()
+	if process.returncode == 0:
+		for line in stdout.split('\n'):
+			if line.startswith('Compiled by GNU CC version'):
+				data = line.split()[-1]
+				if data.endswith('.'):
+					data = data[0:-1]
+				return data
+
+	print('[About] Get gcc version failed.')
+	return _('Unknown')
+
+def getOpenSSLVersion():
+	process = Popen(("/usr/bin/openssl", "version"), stdout=PIPE, stderr=PIPE, universal_newlines=True)
+	stdout, stderr = process.communicate()
+	if process.returncode == 0:
+		data = stdout.strip().split()
+		if len(data) > 1 and data[0] == "OpenSSL":
+			return data[1]
+	print("[About] Get OpenSSL version failed.")
+	return _("Unknown")
+
+
+def _ifinfo(sock, addr, ifname):
+	iface = pack('256s', bytes(ifname[:15], 'utf-8'))
+	info = ioctl(sock.fileno(), addr, iface)
+	if addr == 0x8927:
+		return ''.join(['%02x:' % ord(chr(char)) for char in info[18:24]])[:-1].upper()
+	else:
+		return inet_ntoa(info[20:24])
+
+def getIfConfig(ifname):
+	ifreq = {"ifname": ifname}
+	infos = {}
+	sock = socket(AF_INET, SOCK_DGRAM)
+	# Offsets defined in /usr/include/linux/sockios.h on linux 2.6.
+	infos["addr"] = 0x8915  # SIOCGIFADDR
+	infos["brdaddr"] = 0x8919  # SIOCGIFBRDADDR
+	infos["hwaddr"] = 0x8927  # SIOCSIFHWADDR
+	infos["netmask"] = 0x891b  # SIOCGIFNETMASK
+	try:
+		for k, v in infos.items():
+			ifreq[k] = _ifinfo(sock, v, ifname)
+	except Exception as ex:
+		print("[About] getIfConfig Ex: %s" % str(ex))
+		pass
+	sock.close()
+	return ifreq
+
+def getIfTransferredData(ifname):
+	f = open('/proc/net/dev', 'r')
+	for line in f:
+		if ifname in line:
+			data = line.split('%s:' % ifname)[1].split()
+			rx_bytes, tx_bytes = (data[0], data[8])
+			f.close()
+			return rx_bytes, tx_bytes
+
+
 # For modules that do "from About import about"
 about = modules[__name__]
---- a/lib/python/Screens/About.py
+++ b/lib/python/Screens/About.py
@@ -22,10 +22,14 @@
 import os
 import glob
 
+from Components.Network import iNetwork
+from Components.Pixmap import MultiPixmap
+from Components.Console import Console
+from Tools.Geolocation import geolocation
+
 API_GITHUB = 0
 API_GITLAB = 1
 
-
 class About(Screen):
 	def __init__(self, session):
 		Screen.__init__(self, session)
@@ -53,25 +57,15 @@
 
 		GStreamerVersion = about.getGStreamerVersionString().replace("GStreamer", "")
 		self["GStreamerVersion"] = StaticText(GStreamerVersion)
+		AboutText += '\n' + _('GStreamer version: ') + GStreamerVersion + '\n'
 
 		ffmpegVersion = about.getffmpegVersionString()
-		self["ffmpegVersion"] = StaticText(ffmpegVersion)
-
-		player = None
-
-		if os.path.isfile('/var/lib/opkg/info/enigma2-plugin-systemplugins-servicemp3.list'):
-			if GStreamerVersion:
-				player = _("Media player") + ": Gstreamer, " + _("version") + " " + GStreamerVersion
-		if os.path.isfile('/var/lib/opkg/info/enigma2-plugin-systemplugins-servicehisilicon.list'):
-			if os.path.isdir("/usr/lib/hisilicon") and glob.glob("/usr/lib/hisilicon/libavcodec.so.*"):
-				player = _("Media player") + ": ffmpeg, " + _("Hardware Accelerated")
-			elif ffmpegVersion and ffmpegVersion[0].isdigit():
-				player = _("Media player") + ": ffmpeg, " + _("version") + " " + ffmpegVersion
-
-		if player is None:
-				player = _("Media player") + ": " + _("Not Installed")
-
-		AboutText += player + "\n"
+		if  ffmpegVersion:
+			self["ffmpegVersion"] = StaticText(ffmpegVersion)
+			AboutText +=  _('FFmpeg version: ') + ffmpegVersion + '\n'
+		AboutText += "\n"
+		AboutText += _("OpenSSL version: ") + about.getOpenSSLVersion() + "\n"
+		AboutText += _("GCC version: ") + about.getGccVersion() + "\n"
 
 		AboutText += _("Python version: ") + about.getPythonVersionString() + "\n"
 
@@ -515,3 +509,339 @@
 	def updateKeys(self):
 		self["key_red"].setText(_("Cancel") if self.commandIndex < self.numberOfCommands else _("Remove all logfiles"))
 		self["key_green"].setText(_("Refresh") if self.commandIndex < self.numberOfCommands else _("Remove this logfile"))
+
+class Geolocation(Screen):
+	def __init__(self, session):
+		Screen.__init__(self, session)
+		self.setTitle(_("Geolocation"))
+		self.skinName = "About"
+		GeolocationText = _("Geolocation information") + "\n"
+		GeolocationText += "\n"
+		try:
+			continent = geolocation.get("continent", None)
+			if continent is not None:
+				GeolocationText +=  _("Continent: ") + continent + "\n"
+
+			country = geolocation.get("country", None)
+			if country is not None:
+				GeolocationText +=  _("Country: ") + country + "\n"
+
+			state = geolocation.get("regionName", None)
+			if state is not None:
+				GeolocationText +=  _("State: ") + state + "\n"
+
+			city = geolocation.get("city", None)
+			if city is not None:
+				GeolocationText +=  _("City: ") + city + "\n"
+
+			GeolocationText += "\n"
+
+			timezone = geolocation.get("timezone", None)
+			if timezone is not None:
+				GeolocationText +=  _("Timezone: ") + timezone + "\n"
+
+			currency = geolocation.get("currency", None)
+			if currency is not None:
+				GeolocationText +=  _("Currency: ") + currency + "\n"
+
+			GeolocationText += "\n"
+
+			latitude = geolocation.get("lat", None)
+			if str(float(latitude)) is not None:
+				GeolocationText +=  _("Latitude: ") + str(float(latitude)) + "\n"
+
+			longitude = geolocation.get("lon", None)
+			if str(float(longitude)) is not None:
+				GeolocationText +=  _("Longitude: ") + str(float(longitude)) + "\n"
+			self["AboutScrollLabel"] = ScrollLabel(GeolocationText)
+		except Exception as e:
+			self["AboutScrollLabel"] = ScrollLabel(_("Requires internet connection."))
+
+		self["key_red"] = Button(_("Close"))
+		self["actions"] = ActionMap(["ColorActions", "SetupActions"],
+			{
+				"cancel": self.close,
+				"ok": self.close,
+				"red": self.close,
+			})
+
+
+class SystemNetworkInfo(Screen):
+	def __init__(self, session):
+		Screen.__init__(self, session)
+		self.setTitle(_("Network Information"))
+		self.skinName = ["SystemNetworkInfo", "WlanStatus"]
+		self["LabelBSSID"] = StaticText()
+		self["LabelESSID"] = StaticText()
+		self["LabelQuality"] = StaticText()
+		self["LabelSignal"] = StaticText()
+		self["LabelBitrate"] = StaticText()
+		self["LabelEnc"] = StaticText()
+		self["BSSID"] = StaticText()
+		self["ESSID"] = StaticText()
+		self["quality"] = StaticText()
+		self["signal"] = StaticText()
+		self["bitrate"] = StaticText()
+		self["enc"] = StaticText()
+		self["IFtext"] = StaticText()
+		self["IF"] = StaticText()
+		self["Statustext"] = StaticText()
+		self["statuspic"] = MultiPixmap()
+		self["statuspic"].setPixmapNum(1)
+		self["statuspic"].show()
+		self["devicepic"] = MultiPixmap()
+
+		self["AboutScrollLabel"] = ScrollLabel()
+
+		self.iface = None
+		self.createscreen()
+		self.iStatus = None
+
+		if iNetwork.isWirelessInterface(self.iface):
+			try:
+				from Plugins.SystemPlugins.WirelessLan.Wlan import iStatus
+
+				self.iStatus = iStatus
+			except ImportError as err:
+				pass
+			self.resetList()
+			self.onClose.append(self.cleanup)
+
+		self["key_red"] = StaticText(_("Close"))
+
+		self["actions"] = ActionMap(["SetupActions", "ColorActions", "DirectionActions"], {
+			"cancel": self.close,
+			"ok": self.close,
+			"up": self["AboutScrollLabel"].pageUp,
+			"down": self["AboutScrollLabel"].pageDown
+		})
+		self.onLayoutFinish.append(self.updateStatusbar)
+
+	def createscreen(self):
+		self.AboutText = ""
+		publicip = geolocation.get("query", None)
+		if str(publicip) != "":
+			self.AboutText += _("Public IP: ") + str(publicip) + "\n"
+		self.iface = "eth0"
+		eth0 = about.getIfConfig('eth0')
+		if 'addr' in eth0:
+			self.AboutText += _("Local IP: ") + eth0['addr'] + "\n"
+			if 'netmask' in eth0:
+				self.AboutText += _("Netmask: ") + eth0['netmask'] + "\n"
+			if 'hwaddr' in eth0:
+				self.AboutText += _("MAC: ") + eth0['hwaddr'] + "\n"
+			self.iface = 'eth0'
+
+		eth1 = about.getIfConfig('eth1')
+		if 'addr' in eth1:
+			self.AboutText += _("Local IP: ") + eth1['addr'] + "\n"
+			if 'netmask' in eth1:
+				self.AboutText += _("Netmask: ") + eth1['netmask'] + "\n"
+			if 'hwaddr' in eth1:
+				self.AboutText += _("MAC: ") + eth1['hwaddr'] + "\n"
+			self.iface = 'eth1'
+
+		ra0 = about.getIfConfig('ra0')
+		if 'addr' in ra0:
+			self.AboutText += _("Local IP: ") + ra0['addr'] + "\n"
+			if 'netmask' in ra0:
+				self.AboutText += _("Netmask: ") + ra0['netmask'] + "\n"
+			if 'hwaddr' in ra0:
+				self.AboutText += _("MAC: ") + ra0['hwaddr'] + "\n"
+			self.iface = 'ra0'
+
+		wlan0 = about.getIfConfig('wlan0')
+		if 'addr' in wlan0:
+			self.AboutText += _("Local IP: ") + wlan0['addr'] + "\n"
+			if 'netmask' in wlan0:
+				self.AboutText += _("Netmask: ") + wlan0['netmask'] + "\n"
+			if 'hwaddr' in wlan0:
+				self.AboutText += _("MAC: ") + wlan0['hwaddr'] + "\n"
+			self.iface = 'wlan0'
+
+		wlan3 = about.getIfConfig('wlan3')
+		if 'addr' in wlan3:
+			self.AboutText += _("Local IP: ") + wlan3['addr'] + "\n"
+			if 'netmask' in wlan3:
+				self.AboutText += _("Netmask: ") + wlan3['netmask'] + "\n"
+			if 'hwaddr' in wlan3:
+				self.AboutText += _("MAC: ") + wlan3['hwaddr'] + "\n"
+			self.iface = 'wlan3'
+
+		rx_bytes, tx_bytes = about.getIfTransferredData(self.iface)
+		self.AboutText += "\n"
+		self.AboutText += _("Bytes received: ") + rx_bytes + "\n"
+		self.AboutText += _("Bytes sent: ") + tx_bytes + "\n"
+
+		isp = geolocation.get("isp", None)
+		isporg = geolocation.get("org", None)
+		self.AboutText += "\n"
+		if isp is not None:
+			if isporg is not None:
+				self.AboutText += _("ISP: ") + isp + " " + "(" + isporg + ")" + "\n"
+			else:
+				self.AboutText += _("ISP: ") + isp + "\n"
+
+		mobile = geolocation.get("mobile", False)
+		if mobile is not False:
+			self.AboutText += _("Mobile: ") + _("Yes") + "\n"
+		else:
+			self.AboutText += _("Mobile: ") + _("No") + "\n"
+
+		proxy = geolocation.get("proxy", False)
+		if proxy is not False:
+			self.AboutText += _("Proxy: ") + _("Yes") + "\n"
+		else:
+			self.AboutText += _("Proxy: ") + _("No") + "\n"
+
+		self.AboutText += "\n"
+
+		self.console = Console()
+		self.console.ePopen('ethtool %s' % self.iface, self.SpeedFinished)
+
+	def SpeedFinished(self, result, retval, extra_args):
+		result_tmp = result.split('\n')
+		for line in result_tmp:
+			if 'Speed: ' in line:
+				speed = line.split(': ')[1][:-4]
+				self.AboutText += _("Speed: ") + speed + _('Mb/s\n')
+
+		hostname = open('/proc/sys/kernel/hostname').read()
+		self.AboutText += _("Hostname: ") + hostname + "\n"
+		self["AboutScrollLabel"].setText(self.AboutText)
+
+	def cleanup(self):
+		if self.iStatus:
+			self.iStatus.stopWlanConsole()
+
+	def resetList(self):
+		if self.iStatus:
+			self.iStatus.getDataForInterface(self.iface, self.getInfoCB)
+
+	def getInfoCB(self, data, status):
+		self.LinkState = None
+		if data is not None and data:
+			if status is not None:
+				# getDataForInterface()->iwconfigFinished() in
+				# Plugins/SystemPlugins/WirelessLan/Wlan.py sets fields to boolean False
+				# if there is no info for them, so we need to check that possibility
+				# for each status[self.iface] field...
+				if self.iface == 'wlan0' or self.iface == 'wlan3' or self.iface == 'ra0':
+					# accesspoint is used in the "enc" code too, so we get it regardless
+					if not status[self.iface]["accesspoint"]:
+						accesspoint = _("Unknown")
+					else:
+						if status[self.iface]["accesspoint"] == "Not-Associated":
+							accesspoint = _("Not-Associated")
+							essid = _("No connection")
+						else:
+							accesspoint = status[self.iface]["accesspoint"]
+					if 'BSSID' in self:
+						self.AboutText += _('Accesspoint: ') + accesspoint + '\n'
+
+					if 'ESSID' in self:
+						if not status[self.iface]["essid"]:
+							essid = _("Unknown")
+						else:
+							if status[self.iface]["essid"] == "off":
+								essid = _("No connection")
+							else:
+								essid = status[self.iface]["essid"]
+						self.AboutText += _('SSID: ') + essid + '\n'
+
+					if 'quality' in self:
+						if not status[self.iface]["quality"]:
+							quality = _("Unknown")
+						else:
+							quality = status[self.iface]["quality"]
+						self.AboutText += _('Link quality: ') + quality + '\n'
+
+					if 'bitrate' in self:
+						if not status[self.iface]["bitrate"]:
+							bitrate = _("Unknown")
+						else:
+							if status[self.iface]["bitrate"] == '0':
+								bitrate = _("Unsupported")
+							else:
+								bitrate = str(status[self.iface]["bitrate"]) + " Mb/s"
+						self.AboutText += _('Bitrate: ') + bitrate + '\n'
+
+					if 'signal' in self:
+						if not status[self.iface]["signal"]:
+							signal = _("Unknown")
+						else:
+							signal = status[self.iface]["signal"]
+						self.AboutText += _('Signal strength: ') + signal + '\n'
+
+					if 'enc' in self:
+						if not status[self.iface]["encryption"]:
+							encryption = _("Unknown")
+						else:
+							if status[self.iface]["encryption"] == "off":
+								if accesspoint == "Not-Associated":
+									encryption = _("Disabled")
+								else:
+									encryption = _("Unsupported")
+							else:
+								encryption = _("Enabled")
+						self.AboutText += _('Encryption: ') + encryption + '\n'
+
+					if ((status[self.iface]["essid"] and status[self.iface]["essid"] == "off") or not status[self.iface]["accesspoint"] or status[self.iface]["accesspoint"] == "Not-Associated"):
+						self.LinkState = False
+						self["statuspic"].setPixmapNum(1)
+						self["statuspic"].show()
+					else:
+						self.LinkState = True
+						iNetwork.checkNetworkState(self.checkNetworkCB)
+					self["AboutScrollLabel"].setText(self.AboutText)
+
+	def exit(self):
+		self.close(True)
+
+	def updateStatusbar(self):
+		self["IFtext"].setText(_("Network: "))
+		self["IF"].setText(iNetwork.getFriendlyAdapterName(self.iface))
+		self["Statustext"].setText(_("Link: "))
+		if iNetwork.isWirelessInterface(self.iface):
+			self["devicepic"].setPixmapNum(1)
+			try:
+				self.iStatus.getDataForInterface(self.iface, self.getInfoCB)
+			except Exception as err:
+				self["statuspic"].setPixmapNum(1)
+				self["statuspic"].show()
+		else:
+			iNetwork.getLinkState(self.iface, self.dataAvail)
+			self["devicepic"].setPixmapNum(0)
+		self["devicepic"].show()
+
+	def dataAvail(self, data):
+		self.LinkState = None
+		for line in data.splitlines():
+			line = line.strip()
+			if 'Link detected:' in line:
+				if "yes" in line:
+					self.LinkState = True
+				else:
+					self.LinkState = False
+		if self.LinkState:
+			iNetwork.checkNetworkState(self.checkNetworkCB)
+		else:
+			self["statuspic"].setPixmapNum(1)
+			self["statuspic"].show()
+
+	def checkNetworkCB(self, data):
+		try:
+			if iNetwork.getAdapterAttribute(self.iface, "up") is True:
+				if self.LinkState is True:
+					if data <= 2:
+						self["statuspic"].setPixmapNum(0)
+					else:
+						self["statuspic"].setPixmapNum(1)
+				else:
+					self["statuspic"].setPixmapNum(1)
+			else:
+				self["statuspic"].setPixmapNum(1)
+			self["statuspic"].show()
+		except Exception as err:
+			pass
+
